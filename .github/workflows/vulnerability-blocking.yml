name: Vulnerability Blocking

on:
  pull_request_target:
    branches: [ "main", "develop", "release/**", "hotfix/**" ]
  push:
    branches: [ "main", "develop" ]

permissions:
  contents: read
  pull-requests: write

jobs:
  vulnerability-check:
    name: Vulnerability Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Only checkout the base branch, not the PR code
          ref: ${{ github.base_ref }}

      - name: Use Node.js 20.x
        uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b # v4.0.3
        with:
          node-version: 20.x

      - name: Install dependencies
        run: npm ci

      - name: Run NPM Audit
        id: npm-audit
        run: |
          npm audit --audit-level=moderate --json > npm-audit-report.json
          
          # Count vulnerabilities by severity
          HIGH_VULNS=$(jq '.metadata.vulnerabilities.high // 0' npm-audit-report.json)
          MODERATE_VULNS=$(jq '.metadata.vulnerabilities.moderate // 0' npm-audit-report.json)
          CRITICAL_VULNS=$(jq '.metadata.vulnerabilities.critical // 0' npm-audit-report.json)
          
          echo "high_vulns=$HIGH_VULNS" >> $GITHUB_OUTPUT
          echo "moderate_vulns=$MODERATE_VULNS" >> $GITHUB_OUTPUT
          echo "critical_vulns=$CRITICAL_VULNS" >> $GITHUB_OUTPUT
          
          TOTAL_VULNS=$((HIGH_VULNS + MODERATE_VULNS + CRITICAL_VULNS))
          echo "total_vulns=$TOTAL_VULNS" >> $GITHUB_OUTPUT
          
          # Block on critical or high vulnerabilities
          if [ "$CRITICAL_VULNS" -gt 0 ] || [ "$HIGH_VULNS" -gt 0 ]; then
            echo "::error::Critical or High vulnerabilities detected - blocking merge"
            exit 1
          fi
          
          # Warn on moderate vulnerabilities but don't block
          if [ "$MODERATE_VULNS" -gt 0 ]; then
            echo "::warning::$MODERATE_VULNS moderate vulnerabilities detected"
          fi

      - name: Run Python Safety Check
        id: safety-check
        run: |
          pip install safety
          safety check --json --output safety-report.json || true
          
          if [ -f "safety-report.json" ]; then
            VULN_COUNT=$(jq '.vulnerabilities | length' safety-report.json)
            echo "vuln_count=$VULN_COUNT" >> $GITHUB_OUTPUT
            
            if [ "$VULN_COUNT" -gt 0 ]; then
              echo "::warning::$VULN_COUNT Python vulnerabilities detected"
            fi
          fi

      - name: Generate Vulnerability Report
        if: always()
        run: |
          echo "# Vulnerability Report" > vulnerability-report.md
          echo "Generated on: $(date)" >> vulnerability-report.md
          echo "" >> vulnerability-report.md
          
          echo "## NPM Vulnerabilities" >> vulnerability-report.md
          echo "- Critical: ${{ steps.npm-audit.outputs.critical_vulns || 'N/A' }}" >> vulnerability-report.md
          echo "- High: ${{ steps.npm-audit.outputs.high_vulns || 'N/A' }}" >> vulnerability-report.md
          echo "- Moderate: ${{ steps.npm-audit.outputs.moderate_vulns || 'N/A' }}" >> vulnerability-report.md
          echo "- Total: ${{ steps.npm-audit.outputs.total_vulns || 'N/A' }}" >> vulnerability-report.md
          
          echo "" >> vulnerability-report.md
          echo "## Python Vulnerabilities" >> vulnerability-report.md
          echo "- Total: ${{ steps.safety-check.outputs.vuln_count || 'N/A' }}" >> vulnerability-report.md
          
          if [ -f "npm-audit-report.json" ]; then
            echo "" >> vulnerability-report.md
            echo "## Detailed NPM Report" >> vulnerability-report.md
            echo "Full report available in artifacts" >> vulnerability-report.md
          fi

      - name: Upload Vulnerability Reports
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: vulnerability-reports
          path: |
            npm-audit-report.json
            safety-report.json
            vulnerability-report.md
          retention-days: 30

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7 # v7.0.1
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Vulnerability Report')
            );
            
            const status = '${{ job.status }}';
            const summary = status === 'success' 
              ? '✅ **Vulnerability Check PASSED** - No critical or high vulnerabilities detected'
              : '❌ **Vulnerability Check FAILED** - Critical or high vulnerabilities detected';
            
            const body = `## Vulnerability Report
            
            ${summary}
            
            **NPM Vulnerabilities:**
            - Critical: ${{ steps.npm-audit.outputs.critical_vulns || 'N/A' }}
            - High: ${{ steps.npm-audit.outputs.high_vulns || 'N/A' }}
            - Moderate: ${{ steps.npm-audit.outputs.moderate_vulns || 'N/A' }}
            - Total: ${{ steps.npm-audit.outputs.total_vulns || 'N/A' }}
            
            **Python Vulnerabilities:**
            - Total: ${{ steps.safety-check.outputs.vuln_count || 'N/A' }}
            
            **Status:** ${status}
            **Timestamp:** ${new Date().toISOString()}
            
            > **Note:** This check blocks PRs with critical or high vulnerabilities. Moderate vulnerabilities are reported but don't block merging.`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }
