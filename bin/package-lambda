#!/bin/bash
set -e

SRC=src
OUTPUT=Lambda.zip
EXCLUDE_PACKAGES=""
BUILD_DIR=$PWD/build
IS_LAYER=0
TMP_DIR=$BUILD_DIR/tmp/
PYPI_URL=

# Parse named parameters
while [ $# -gt 0 ]; do
    if [[ $1 == *"="* ]]; then
        # Handle --param=value style
        param="${1%%=*}"
        value="${1#*=}"

        case "$param" in
            --src)
                SRC="$value"
                ;;
            --output)
                OUTPUT="$value"
                ;;
            --build)
                BUILD_DIR="$value"
                ;;
            --exclude)
                EXCLUDE_PACKAGES="$value"
                ;;
            --pypi)
                PYPI_URL="$value"
                ;;
            --layer)
                IS_LAYER=1
                ;;
            *)
                echo "Unknown parameter: $param"
                echo "Usage: $0 --src <source_dir> --output <output_file> --exclude <packages> --layer"
                exit 1
                ;;
        esac
    else
        # Handle --param value style
        case "$1" in
            --src)
                shift
                SRC="$1"
                ;;
            --output)
                shift
                OUTPUT="$1"
                ;;
            --build)
                shift
                BUILD_DIR="$1"
                TMP_DIR=$BUILD_DIR/tmp/python/
                ;;
            --exclude)
                shift
                EXCLUDE_PACKAGES="$1"
                ;;
            --pypi)
                shift
                PYPI_URL="$1"
                ;;
            --layer)
                IS_LAYER=1
                ;;
            *)
                echo "Unknown parameter: $1"
                echo "Usage: $0 --src <source_dir> --output <output_file> --exclude <packages>"
                exit 1
                ;;
        esac
    fi
    shift
done

echo "Starting"
if [ $IS_LAYER -eq 1 ]; then
    TMP_DIR=$BUILD_DIR/tmp/python/
fi


# Print parameters for debugging
echo "Source directory: $SRC"
echo "Output file: $OUTPUT"
echo "Build directory: $BUILD_DIR"
echo "Temp directory: $TMP_DIR"


install_requirements() {
    echo "installing requirements"
    rm -rf "$TMP_DIR"
    mkdir -p "$TMP_DIR"
    if [ -f "$SRC/requirements.txt" ]; then
        echo "Installing requirements from $SRC/requirements.txt"
        python3 -m pip install -r "$SRC/requirements.txt" --target "$TMP_DIR" --index-url $PYPI_URL
    else
        echo "No requirements.txt found in $SRC"
    fi
}


build_package() {
    echo "building package"
    if [ -d "$SRC" ]; then
        find "$SRC" -type f -not -path "*/build/*" -not -path "*/.hatch/*" -not -path "*/.venv/*" -exec cp --parents {} "$TMP_DIR" \;
    fi
}

package_artifacts() {
    echo "Packaging"
    if [ -n "$EXCLUDE_PACKAGES" ]; then
        echo "Removing excluded packages: $EXCLUDE_PACKAGES"
        for pkg in ${EXCLUDE_PACKAGES//,/ }; do
            echo "Removing $pkg"
            rm -rf ${TMP_DIR}/${pkg}
            rm -rf ${TMP_DIR}/${pkg}-*
            # Also remove egg-info directories
            find "$TMP_DIR" -type d -name "${pkg}*egg-info" -exec rm -rf {} +
        done
    fi

    # AWS Lambda recommends to exclude __pycache__: https://docs.aws.amazon.com/lambda/latest/dg/python-package.html#python-package-pycache
    find "${TMP_DIR}" -depth -name __pycache__ -exec rm -rf {} \;
    cd "${BUILD_DIR}/tmp/"
    zip -r "${BUILD_DIR}/${OUTPUT}" .
    rm -rf "${BUILD_DIR}/tmp"
}

install_requirements
build_package
package_artifacts
