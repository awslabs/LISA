accountNumber: "012345678901"
region: us-east-1
authConfig:
  authority:
  clientId:
  adminGroup:
  jwtGroupsProperty:
s3BucketModels: hf-models-gaiic
ragRepositories: []
########################### OPTIONAL BELOW #######################################
# profile: AWS CLI profile for deployment.
# vpcId: VPC ID for the application. (e.g. vpc-0123456789abcdef)
# The following is an array of subnet objects for the application. These contain a subnetId(e.g. [subnet-fedcba9876543210] and ipv4CidrBlock
# subnets:
#  - subnetId:
#    ipv4CidrBlock:
# securityGroupConfig: # If securityGroupConfig is provided, all security groups must be overridden. Vector stores SGs are optional based on deployment preferences.
#   modelSecurityGroupId: sg-0123456789abcdef
#   restAlbSecurityGroupId: sg-0123456789abcdef
#   lambdaSecurityGroupId: sg-0123456789abcdef
#   liteLlmDbSecurityGroupId: sg-0123456789abcdef
#   openSearchSecurityGroupId: sg-0123456789abcdef #Optional
#   pgVectorSecurityGroupId: sg-0123456789abcdef  #Optional
# The following configuration will allow for using a custom domain for the chat user interface.
# If this option is specified, the API Gateway invocation URL will NOT work on its own as the application URL.
# Users must use the custom domain for the user interface to work if this option is populated.
# apiGatewayConfig:
#  domainName:
# restApiConfig:
#  sslCertIamArn: ARN of the self-signed cert to be used throughout the system
# Some customers will want to download required libs prior to deployment, provide a path to the zipped resources
# lambdaLayerAssets:
#   authorizerLayerPath: /path/to/authorizer_layer.zip
#   commonLayerPath: /path/to/common_layer.zip
#   fastapiLayerPath: /path/to/fastapi_layer.zip
#   ragLayerPath: /path/to/rag_layer.zip
#   sdkLayerPath: /path/to/sdk_layer.zip
# stackSynthesizer: CliCredentialsStackSynthesizer
# deploymentPrefix: Prefix for deployment resources.
# webAppAssetsPath: Optional path to precompiled webapp assets. If not specified the web application will be built at deploy time.
# permissionsBoundaryAspect:
#   permissionsBoundaryPolicyName: CustomPermissionBoundary
#   rolePrefix: CustomPrefix
#   policyPrefix: CustomPrefix
#   instanceProfilePrefix: CustomPrefix
# vpcId: vpc-0123456789abcdef,
# aws-iso partition mountS3 package location
# mountS3DebUrl: https://mountpoint-s3-release-us-iso-east-1.s3.us-iso-east-1.c2s.ic.gov/latest/x86_64/mount-s3.deb
# aws-iso-b partition mountS3 package location
# mountS3DebUrl: https://mountpoint-s3-release-us-isob-east-1.s3.us-isob-east-1.sc2s.sgov.gov/latest/x86_64/mount-s3.deb
# List of AWS account numbers for ECR repositories.
# accountNumbersEcr:
#  - 012345678901
# ragRepositories:
#  - repositoryId: pgvector-rag
#    type: pgvector
#    rdsConfig:
#      username: postgres
#    - repositoryId: default
#      type: opensearch
#      opensearchConfig:
#        dataNodes: 2
#        dataNodeInstanceType: r6g.large.search
#        masterNodes: 0
#        masterNodeInstanceType: r6g.large.search
#        volumeSize: 300
#    If adding an existing PGVector database, this configurations assumes:
#    1. The database has been configured to have pgvector installed and enabled: https://aws.amazon.com/about-aws/whats-new/2023/05/amazon-rds-postgresql-pgvector-ml-model-integration/
#    2. The database is accessible by RAG-related lambda functions (add inbound PostgreSQL access on the database's security group for all Lambda RAG security groups)
#    3. A secret ID exists in SecretsManager holding the database password within a json block of '{"password":"your_password_here"}'. This is the same format that RDS natively provides a password in SecretsManager.
#    If the passwordSecretId or dbHost are not provided, then a sample database will be created for you. Only the username is required.
#    - repositoryId: pgvector-rag
#     type: pgvector
#     rdsConfig:
#       username: postgres
#       passwordSecretId: # password ID as stored in SecretsManager. Example: "rds!db-aa88493d-be8d-4a3f-96dc-c668165f7826"
#       dbHost: # Host name of database. Example hostname from RDS: "my-db-name.291b2f03.us-east-1.rds.amazonaws.com"
#       dbName: postgres
# You can optionally provide a list of models and the deployment process will ensure they exist in your model bucket and try to download them if they don't exist
# ecsModels:
#  - modelName: mistralai/Mistral-7B-Instruct-v0.2
#    inferenceContainer: tgi
#    baseImage: ghcr.io/huggingface/text-generation-inference:2.0.1
#  - modelName: intfloat/e5-large-v2
#    inferenceContainer: tei
#    baseImage: ghcr.io/huggingface/text-embeddings-inference:1.2.3
#    - modelName: mistralai/Mixtral-8x7B-Instruct-v0.1
#      inferenceContainer: tgi
#      baseImage: ghcr.io/huggingface/text-generation-inference:2.0.1
# litellmConfig:
#  db_key: sk-d7a77bcb-3e23-483c-beec-2700f2baeeb1  # A key is required for model management purposes - must start with sk-
