name: Draft Release and Tag

on:
  pull_request:
    types: [closed]

permissions:
  contents: read  # Default read-only

jobs:
  draft_release:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required for creating releases
      id-token: write  # Required for AWS authentication
    if: (startsWith(github.event.pull_request.head.ref, 'release/' ) || startsWith(github.event.pull_request.head.ref, 'hotfix/')) && github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'
    steps:
      - name: Checkout Source Tag
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4
        with:
          ref: main
      - name: Get Version
        id: get-version
        run: |
          version=$(echo "$GITHUB_HEAD_REF" | cut -d/ -f2)
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "VERSION = $version"
        env:
          GITHUB_HEAD_REF: ${{ github.event.pull_request.head.ref }}
      - name: Create Release
        run: |
          gh release create ${{ steps.get-version.outputs.version }} --generate-notes -d -t "${{ steps.get-version.outputs.version }}" --target main
        env:
          GH_TOKEN: ${{ secrets.LEAD_ACCESS_TOKEN }}
  send_final_slack_notification:
    name: Send Final Slack Notification
    needs: [draft_release]
    runs-on: ubuntu-latest
    if: always()
    permissions:
      contents: read
    steps:
      - name: Get Version
        id: get-version
        run: |
          version=$(echo "$GITHUB_HEAD_REF" | cut -d/ -f2)
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "VERSION = $version"
        env:
          GITHUB_HEAD_REF: ${{ github.event.pull_request.head.ref }}
      - name: Send Notification that Draft Release is Ready
        uses: rtCamp/action-slack-notify@cdf0a2130cbcdfd82ba5fcac8e076370bf381b36 # v2
        if: (startsWith(github.event.pull_request.head.ref, 'release/' ) || startsWith(github.event.pull_request.head.ref, 'hotfix/')) && github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'
        with:
          status: success()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_COLOR: ${{ contains(join(needs.*.result, ' '), 'failure') && 'failure' || 'success' }}
          SLACK_TITLE: 'Build Finished'
          SLACK_FOOTER: ''
          MSG_MINIMAL: true
          SLACK_MESSAGE_ON_FAILURE: '<!here> FAILED to publish Draft release for ${{ steps.get-version.outputs.version }}'
          SLACK_MESSAGE_ON_SUCCESS: '<!here> Draft release published for <https://github.com/awslabs/LISA/releases|${{ steps.get-version.outputs.version }}>'
          SLACK_MESSAGE: '<!here> Draft release finished with status ${{ job.status }} for ${{ steps.get-version.outputs.version }}'
